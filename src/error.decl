
/* error */

#define LISP_FAIL(...)    error_fail(__VA_ARGS__);
#define LISP_WARN(...)    error_warn(__VA_ARGS__);

#define LISP_ASSERT_ALWAYS(x) assert(x)

#define LISP_ASSERT(x) LISP_ASSERT_ALWAYS(x)

#if LISP_DEBUG
#define LISP_ASSERT_DEBUG(x) LISP_ASSERT(x)
#else
#define LISP_ASSERT_DEBUG(x)
#endif

class ErrorHandler
{
public:
    virtual ~ErrorHandler()
    {
    }

    void fail(char const * fmt, ...)
    {
        va_list ap;
        va_start(ap, fmt);
        vfail(fmt, ap);
        va_end(ap);
    }

    void warn(char const * fmt, ...)
    {
        va_list ap;
        va_start(ap, fmt);
        vwarn(fmt, ap);
        va_end(ap);
    }

    virtual void vfail(char const * fmt, va_list ap) = 0;
    virtual void vwarn(char const * fmt, va_list ap) = 0;
};

void error_fail(char const * fmt, ...);
void error_warn(char const * fmt, ...);

void error_push(ErrorHandler * handler);
void error_pop();
