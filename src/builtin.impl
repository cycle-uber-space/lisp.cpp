
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class BuiltinImpl
{
public:
    Expr make_special(char const * name, BuiltinFunc func)
    {
        return make(name, func, TYPE_BUILTIN_SPECIAL);
    }

    Expr make_function(char const * name, BuiltinFunc func)
    {
        return make(name, func, TYPE_BUILTIN_FUNCTION);
    }

    Expr make_symbol(char const * name, BuiltinFunc func)
    {
        return make(name, func, TYPE_BUILTIN_SYMBOL);
    }

    char const * name(Expr exp)
    {
        return info(exp).name;
    }

    BuiltinFunc func(Expr exp)
    {
        return info(exp).func;
    }

protected:
    U64 count() const
    {
        return (U64) m_info.size();
    }

    Expr make(char const * name, BuiltinFunc func, U64 type)
    {
        U64 const index = count();
        BuiltinInfo info;
        info.name = name; /* TODO take ownership of name? */
        info.func = func;
        m_info.push_back(info);
        return make_expr(type, index);
    }

    BuiltinInfo & info(Expr exp)
    {
        LISP_ASSERT(is_builtin(exp));
        U64 const index = expr_data(exp);
        LISP_ASSERT(index < count());
        return m_info[index];
    }

private:
    std::vector<BuiltinInfo> m_info;
};

#if LISP_WANT_GLOBAL_API

BuiltinImpl g_builtin;

Expr make_builtin_special(char const * name, BuiltinFunc func)
{
    return g_builtin.make_special(name, func);
}

Expr make_builtin_function(char const * name, BuiltinFunc func)
{
    return g_builtin.make_function(name, func);
}

Expr make_builtin_symbol(char const * name, BuiltinFunc func)
{
    return g_builtin.make_symbol(name, func);
}

char const * builtin_name(Expr exp)
{
    return g_builtin.name(exp);
}

BuiltinFunc builtin_func(Expr exp)
{
    return g_builtin.func(exp);
}

#endif

#ifdef LISP_NAMESPACE
}
#endif
