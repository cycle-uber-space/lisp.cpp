
/* system */

#if LISP_WANT_SYSTEM_API

#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class SystemImpl;

class System
{
public:
    System();
    virtual ~System();

    /* core */

    Expr list(Expr exp1);
    Expr list(Expr exp1, Expr exp2);
    Expr list(Expr exp1, Expr exp2, Expr exp3);
    Expr list(Expr exp1, Expr exp2, Expr exp3, Expr exp4, Expr exp5);

    Expr first(Expr seq);
    Expr second(Expr seq);

    bool equal(Expr a, Expr b);

    /* read */

    Expr intern(char const * name);
    Expr read_one_from_string(char const * src);
    bool maybe_parse_expr(Expr in, Expr * exp);

    /* env */

    Expr make_env(Expr outer);
    virtual Expr make_core_env();

    void env_def(Expr env, Expr var, Expr val);
    void env_defun(Expr env, char const * name, BuiltinFunc func);
    void env_defun_println(Expr env, char const * name);
    void env_defspecial(Expr env, char const * name, BuiltinFunc func);
    void env_defspecial_quote(Expr env);
    void env_defspecial_while(Expr env);
    void env_defsym(Expr env, char const * name, BuiltinFunc func);
    void env_del(Expr env, Expr var);

    Expr env_get(Expr env, Expr var);
    bool env_can_set(Expr env, Expr var);
    void env_set(Expr env, Expr var, Expr val);

    /* function */

    Expr make_function(Expr env, Expr name, Expr args, Expr body);

    /* eval */

    Expr eval(Expr exp, Expr env);
    Expr eval_body(Expr exps, Expr env);
    void load_file(char const * path, Expr env);
    void repl(Expr env);

private:
    SystemImpl * m_impl = nullptr;
    static var s_instance: System *;
};

#ifdef LISP_NAMESPACE
}
#endif

#endif
