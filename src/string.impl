
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class StringImpl
{
public:
    StringImpl(U64 type) : m_type(type)
    {
    }

    inline bool isinstance(Expr exp) const
    {
        return expr_type(exp) == m_type;
    }

    Expr make(char const * str)
    {
        U64 const index = count();
        m_strings.push_back(str);
        return make_expr(m_type, index);
    }

    char const * value(Expr exp)
    {
        return impl(exp).c_str();
    }

    U64 length(Expr exp)
    {
        return (U64) impl(exp).size();
    }

    bool equal(Expr exp1, Expr exp2)
    {
        return impl(exp1) == impl(exp2);
    }

protected:
    U64 count() const
    {
        return (U64) m_strings.size();
    }

    std::string const & impl(Expr exp)
    {
        LISP_ASSERT(isinstance(exp));
        U64 const index = expr_data(exp);
        LISP_ASSERT(index < count());
        return m_strings[index];
    }

private:
    U64 m_type;
    std::vector<std::string> m_strings;
};

#if LISP_WANT_GLOBAL_API

StringImpl g_string(TYPE_STRING);

Expr make_string(char const * str)
{
    return g_string.make(str);
}

Expr make_string_from_utf8(U8 const * str)
{
    // TODO assert this works?
    return make_string((char const *) str);
}

Expr make_string_from_utf32_char(U32 code)
{
    // TODO use string output stream
    U8 bytes[5];
    U8 * out_bytes = bytes;

    if (code < 0x80)
    {
        *out_bytes++ = (U8) code;
    }
    else if (code < 0x800)
    {
        *out_bytes++ = (U8) (0xc0 | ((code >> 6) & 0x1f));
        *out_bytes++ = (U8) (0x80 | (code & 0x3f));
    }
    else if ((code >= 0xd800 && code < 0xe000))
    {
        LISP_FAIL("illegal code point %" PRIu64 "\n", code);
    }
    else if (code < 0x10000)
    {
        *out_bytes++ = (U8) (0xe0 | ((code >> 12) & 0xf));
        *out_bytes++ = (U8) (0x80 | ((code >> 6) & 0x3f));
        *out_bytes++ = (U8) (0x80 | (code & 0x3f));
    }
    else if (code <= 0x10ffff)
    {
        *out_bytes++ = (U8) (0xf0 | ((code >> 18) & 0x7));
        *out_bytes++ = (U8) (0x80 | ((code >> 12) & 0x3f));
        *out_bytes++ = (U8) (0x80 | ((code >> 6) & 0x3f));
        *out_bytes++ = (U8) (0x80 | (code & 0x3f));
    }
    else
    {
        LISP_FAIL("illegal code point %" PRIu64 " for utf-8 encoder\n", code);
    }

    *out_bytes++ = 0;
    return make_string_from_utf8(bytes);
}

char const * string_value(Expr exp)
{
    return g_string.value(exp);
}

U8 const * string_value_utf8(Expr exp)
{
    // TODO actually change internal representation
    return (U8 const *) string_value(exp);
}

U64 string_length(Expr exp)
{
    return g_string.length(exp);
}

bool string_equal(Expr exp1, Expr exp2)
{
    return g_string.equal(exp1, exp2);
}

#endif

#ifdef LISP_NAMESPACE
}
#endif
