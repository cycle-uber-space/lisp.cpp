
/* fixnum */

#define LISP_FIXNUM_SIGN_MASK (UINT64_C(1) << ((U64) LISP_DATA_BITS - UINT64_C(1)))
#define LISP_FIXNUM_BITS_MASK (LISP_EXPR_MASK >> (UINT64_C(64) + UINT64_C(1) - (U64) LISP_DATA_BITS))
#define LISP_FIXNUM_MINVAL    (-(INT64_C(1) << ((I64) LISP_DATA_BITS - INT64_C(1))))
#define LISP_FIXNUM_MAXVAL    ((INT64_C(1) << ((I64) LISP_DATA_BITS - INT64_C(1))) - INT64_C(1))

Expr make_fixnum(I64 value)
{
    LISP_ASSERT(value >= LISP_FIXNUM_MINVAL);
    LISP_ASSERT(value <= LISP_FIXNUM_MAXVAL);

    /* TODO probably no need to mask off the sign
       bits, as they get shifted out by make_expr */
    U64 const data = i64_as_u64(value) & LISP_DATA_MASK;
    return make_expr(TYPE_FIXNUM, data);
}

I64 fixnum_value(Expr exp)
{
    LISP_ASSERT(is_fixnum(exp));

    U64 data = expr_data(exp);

    if (data & LISP_FIXNUM_SIGN_MASK)
    {
        data |= LISP_EXPR_MASK << LISP_DATA_BITS;
    }

    return u64_as_i64(data);
}

Expr fixnum_neg(Expr a)
{
    return make_fixnum(-fixnum_value(a));
}

Expr fixnum_add(Expr a, Expr b)
{
    return make_fixnum(fixnum_value(a) + fixnum_value(b));
}

Expr fixnum_mul(Expr a, Expr b)
{
    return make_fixnum(fixnum_value(a) * fixnum_value(b));
}

Expr fixnum_div(Expr a, Expr b)
{
    return make_fixnum(fixnum_value(a) / fixnum_value(b));
}

bool fixnum_eq(Expr a, Expr b)
{
    return a == b;
}

bool fixnum_lt(Expr a, Expr b)
{
    return fixnum_value(a) < fixnum_value(b);
}
