
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class CoreImpl
{
public:
    CoreImpl(SymbolImpl & symbol, SymbolImpl & keyword) : m_symbol(symbol), m_keyword(keyword)
    {
    }

    Expr intern(char const * name)
    {
        if (!strcmp("nil", name))
        {
            return nil;
        }
        else if (name[0] == ':')
        {
            return make_keyword(name + 1);
        }
        else
        {
            return make_symbol(name);
        }
    }

protected:
    Expr make_symbol(char const * name)
    {
        return m_symbol.make(name);
    }

    Expr make_keyword(char const * name)
    {
        return m_keyword.make(name);
    }

private:
    SymbolImpl & m_symbol;
    SymbolImpl & m_keyword;
};

#if LISP_WANT_GLOBAL_API

CoreImpl g_core(g_symbol, g_keyword);

bool equal(Expr a, Expr b)
{
    if (is_cons(a) && is_cons(b))
    {
        return equal(car(a), car(b)) && equal(cdr(a), cdr(b));
    }
    else if (is_string(a) && is_string(b))
    {
        return string_equal(a, b);
    }
    return eq(a, b);
}

bool all_eq(Expr exps)
{
    if (is_nil(exps))
    {
        LISP_FAIL("not enough arguments in call to eq: %s\n", repr(exps));
    }
    var prv = car(exps);
    var tmp = cdr(exps);
    if (is_nil(tmp))
    {
        LISP_FAIL("not enough arguments in call to eq: %s\n", repr(exps));
    }

    for (; tmp; tmp = cdr(tmp))
    {
        let exp = car(tmp);
        if (!eq(prv, exp))
        {
            return false;
        }
        prv = exp;
    }

    return true;
}

// TODO might as well call this b_equal
bool all_equal(Expr exps)
{
    if (is_nil(exps))
    {
        LISP_FAIL("not enough arguments in call to equal: %s\n", repr(exps));
    }
    Expr prv = car(exps);
    Expr tmp = cdr(exps);
    if (is_nil(tmp))
    {
        LISP_FAIL("not enough arguments in call to equal: %s\n", repr(exps));
    }

    for (; tmp; tmp = cdr(tmp))
    {
        let exp = car(tmp);
        if (!equal(prv, exp))
        {
            return false;
        }
        prv = exp;
    }

    return true;
}

Expr intern(char const * name)
{
    return g_core.intern(name);
}

bool is_named_call(Expr exp, Expr name)
{
    return is_cons(exp) && eq(car(exp), name);
}

bool is_quote_call(Expr exp)
{
    return is_named_call(exp, intern("quote"));
}

bool is_unquote(Expr exp)
{
    return is_named_call(exp, LISP_SYM_UNQUOTE);
}

bool is_unquote_splicing(Expr exp)
{
    return is_named_call(exp, LISP_SYM_UNQUOTE_SPLICING);
}

Expr list(Expr exp1)
{
    return cons(exp1, nil);
}

Expr list(Expr exp1, Expr exp2)
{
    return cons(exp1, cons(exp2, nil));
}

Expr list(Expr exp1, Expr exp2, Expr exp3)
{
    return cons(exp1, cons(exp2, cons(exp3, nil)));
}

Expr list(Expr exp1, Expr exp2, Expr exp3, Expr exp4, Expr exp5)
{
    return cons(exp1, cons(exp2, cons(exp3, cons(exp4, cons(exp5, nil)))));
}

Expr first(Expr seq)
{
    return car(seq);
}

Expr second(Expr seq)
{
    return car(cdr(seq));
}

Expr nreverse(Expr list)
{
    if (!list)
    {
        return list;
    }

    Expr prev = nil;
    Expr expr = list;
    while (is_cons(expr))
    {
        Expr next = cdr(expr);
        rplacd(expr, prev);
        prev = expr;
        expr = next;
    }
    if (expr)
    {
        Expr iter;
        for (iter = prev; cdr(iter); iter = cdr(iter))
        {
            Expr next = car(iter);
            rplaca(iter, expr);
            expr = next;
        }
        Expr next = car(iter);
        rplaca(iter, expr);
        rplacd(iter, next);
    }
    return prev;
}

Expr append(Expr a, Expr b)
{
    return a ? cons(car(a), append(cdr(a), b)) : b;
}

void load_file(char const * path, Expr env)
{
    Expr const in = make_file_input_stream_from_path(path);
    Expr exp = nil;
    while (maybe_parse_expr(in, &exp))
    {
        eval(exp, env);
    }
    stream_release(in);
}

void repl(Expr env)
{
    // TODO make a proper prompt input stream
    Expr in = stream_get_stdin();
loop:
    {
        /* read */
        // TODO use global.stream.stdout
        fprintf(stdout, "> ");
        fflush(stdout);

        Expr exp = nil;
        if (!maybe_parse_expr(in, &exp))
        {
            goto done;
        }

        /* eval */
        Expr ret = eval(exp, env);

        /* print */
        println(ret);

        goto loop;
    }
done:
    ;
}

#endif

#ifdef LISP_NAMESPACE
}
#endif
