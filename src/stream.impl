
/* stream */

#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class StreamImpl
{
public:
    StreamImpl()
    {
        m_stdin = make_file_input(stdin, false);
        m_stdout = make_file_output(stdout, false);
        m_stderr = make_file_output(stderr, false);
    }

    ~StreamImpl()
    {
        // TODO add this to stream api?
        for (auto & info : m_info)
        {
            if (info.close_on_quit)
            {
                if (info.file)
                {
                    fclose(info.file);
                    info.file = NULL;
                }
            }
        }
        m_info.clear();
    }

    Expr get_stdin()
    {
        return m_stdin;
    }

    Expr get_stdout()
    {
        return m_stdout;
    }

    Expr get_stderr()
    {
        return m_stderr;
    }

    Expr make_file_input(FILE * file, bool close_on_quit)
    {
        return make_file(file, close_on_quit);
    }

    Expr make_file_output(FILE * file, bool close_on_quit)
    {
        return make_file(file, close_on_quit);
    }

    Expr make_string_input(char const * str)
    {
        // TODO copy string into buffer?
        size_t const len = strlen(str);
        return make_buffer(len + 1, (char *) str);
    }

    Expr make_buffer_output(size_t size, char * buffer)
    {
        return make_buffer(size, buffer);
    }

    U8 read_byte(Expr exp)
    {
        StreamInfo & info = get_info(exp);
        if (info.file)
        {
            int ch = fgetc(info.file);
            if (ch == EOF)
            {
                return 0;
            }
            return (U8) ch;
        }

        if (info.buffer)
        {
            return info.buffer[info.cursor++];
        }

        //LISP_FAIL("cannot read from stream %s\n", repr(exp));
        LISP_FAIL("cannot read from stream\n");
        return 0;
    }

    U32 do_read_char(Expr exp)
    {
        U8 ch = read_byte(exp);
        if (ch & 0x80)
        {
            U32 val = 0;
            if ((ch >> 5) == 0x6)
            {
                val |= ch & 0x1f;

                ch = read_byte(exp);
                val <<= 6;
                val |= (ch & 0x3f);
            }
            else if ((ch >> 4) == 0xe)
            {
                val |= ch & 0xf;

                ch = read_byte(exp);
                val <<= 6;
                val |= (ch & 0x3f);

                ch = read_byte(exp);
                val <<= 6;
                val |= (ch & 0x3f);
            }
            else if ((ch >> 3) == 0x1e)
            {
                val |= ch & 0x7;

                ch = read_byte(exp);
                val <<= 6;
                val |= (ch & 0x3f);

                ch = read_byte(exp);
                val <<= 6;
                val |= (ch & 0x3f);

                ch = read_byte(exp);
                val <<= 6;
                val |= (ch & 0x3f);
            }
            if (val == 0 || (val >= 0xd000 && val <= 0xdfff) || val >= 0x10ffff)
            {
                LISP_FAIL("illegal UTF-8\n");
            }

            return val;
        }
        else
        {
            return ch;
        }
    }

    U32 read_char(Expr exp)
    {
        StreamInfo & info = get_info(exp);
        if (info.peek)
        {
            let ret = info.peek;
            info.peek = 0;
            return ret;
        }

        return do_read_char(exp);
    }

    U32 peek_char(Expr exp)
    {
        StreamInfo & info = get_info(exp);
        if (!info.peek)
        {
            info.peek = read_char(exp);
        }
        return info.peek;
    }

    void skip_char(Expr exp)
    {
        read_char(exp);
    }

    bool at_end(Expr exp)
    {
        return peek_char(exp) == 0;
    }

    void put_char(Expr exp, U32 code)
    {
        U8 bytes[5] = { 0 };
        U8 * out_bytes = bytes;
        if (code < 0x80)
        {
            *out_bytes++ = (U8) code;
        }
        else if (code < 0x800)
        {
            *out_bytes++ = (U8) (0xc0 | ((code >> 6) & 0x1f));
            *out_bytes++ = (U8) (0x80 | (code & 0x3f));
        }
        else if ((code >= 0xd800 && code < 0xe000))
        {
            LISP_FAIL("illegal code point %" PRIu64 "\n", code);
        }
        else if (code < 0x10000)
        {
            *out_bytes++ = (U8) (0xe0 | ((code >> 12) & 0xf));
            *out_bytes++ = (U8) (0x80 | ((code >> 6) & 0x3f));
            *out_bytes++ = (U8) (0x80 | (code & 0x3f));
        }
        else if (code <= 0x10ffff)
        {
            *out_bytes++ = (U8) (0xf0 | ((code >> 18) & 0x7));
            *out_bytes++ = (U8) (0x80 | ((code >> 12) & 0x3f));
            *out_bytes++ = (U8) (0x80 | ((code >> 6) & 0x3f));
            *out_bytes++ = (U8) (0x80 | (code & 0x3f));
        }
        else
        {
            LISP_FAIL("illegal code point %" PRIu64 " for utf-8 encoder\n", code);
        }

        put_bytes(exp, out_bytes - bytes, bytes);
    }

    void put_bytes(Expr exp, size_t size, U8 const * bytes)
    {
        StreamInfo & info = get_info(exp);
        if (info.file)
        {
            fwrite(bytes, size, 1, info.file);
            return;
        }

        if (info.buffer)
        {
            LISP_ASSERT(info.cursor + size < info.size);
            memcpy(info.buffer + info.cursor, bytes, size);
            info.cursor += size;
            return;
        }

        LISP_FAIL("cannot put bytes into stream\n");
    }

    void put_cstring(Expr exp, char const * str)
    {
        put_bytes(exp, strlen(str), (U8 const *) str);
    }

    void put_cchar(Expr exp, char ch)
    {
        //LISP_ASSERT(ch < 0x80);
        U8 val = (U8) ch;
        put_bytes(exp, 1, &val);
    }

    void release(Expr exp)
    {
        auto & info = get_info(exp);
        if (info.close_on_quit)
        {
            if (info.file)
            {
                fclose(info.file);
                info.file = NULL;
            }
        }

        // TODO add to free list
    }

protected:
    U64 count() const
    {
        return (U64) m_info.size();
    }

    StreamInfo & get_info(Expr exp)
    {
        LISP_ASSERT(is_stream(exp));
        U64 const index = expr_data(exp);
        LISP_ASSERT(index < count());
        return m_info[index];
    }

    Expr make_file(FILE * file, bool close_on_quit)
    {
        StreamInfo info;
        memset(&info, 0, sizeof(StreamInfo));
        info.file = file;
        info.close_on_quit = close_on_quit;
        return make_from_info(info);
    }

    Expr make_buffer(size_t size, char * buffer)
    {
        StreamInfo info;
        memset(&info, 0, sizeof(StreamInfo));
        info.size = size;
        info.buffer = buffer;
        info.cursor = 0;
        return make_from_info(info);
    }

    Expr make_from_info(StreamInfo const & info)
    {
        U64 const index = count();
        m_info.push_back(info);
        return make_expr(TYPE_STREAM, index);
    }

    StreamInfo & info(Expr exp)
    {
        LISP_ASSERT(is_stream(exp));
        Expr const index = expr_data(exp);
        LISP_ASSERT(index < count());
        return m_info[index];
    }

private:
    Expr m_stdin;
    Expr m_stdout;
    Expr m_stderr;
    std::vector<StreamInfo> m_info;
};

#ifdef LISP_NAMESPACE
}
#endif
