
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class EnvImpl
{
public:
    Expr make(Expr outer)
    {
        // ((<vars> . <vals>) . <outer>)
        // TODO add dummy conses as sentinels for vars and vals
        return cons(cons(nil, nil), outer);
    }

    Expr get_vars(Expr env)
    {
        return caar(env);
    }

    void set_vars(Expr env, Expr vars)
    {
        rplaca(car(env), vars);
    }

    Expr get_vals(Expr env)
    {
        return cdar(env);
    }

    void set_vals(Expr env, Expr vals)
    {
        rplacd(car(env), vals);
    }

    Expr get_outer(Expr env)
    {
        return cdr(env);
    }

    void def(Expr env, Expr var, Expr val)
    {
        Expr const vals = find_local(env, var);
        if (vals)
        {
            rplaca(vals, val);
        }
        else
        {
            set_vars(env, cons(var, get_vars(env)));
            set_vals(env, cons(val, get_vals(env)));
        }
    }

    void del(Expr env, Expr var)
    {
        Expr prev_vars = nil;
        Expr prev_vals = nil;

        Expr vars = get_vars(env);
        Expr vals = get_vals(env);
        while (vars)
        {
            if (car(vars) == var)
            {
                if (prev_vars)
                {
                    LISP_ASSERT(prev_vals);
                    rplacd(prev_vars, cdr(vars));
                    rplacd(prev_vals, cdr(vals));
                }
                else
                {
                    set_vars(env, cdr(vars));
                    set_vals(env, cdr(vals));
                }
                return;
            }

            prev_vars = vars;
            prev_vals = vals;
            vars = cdr(vars);
            vals = cdr(vals);
        }

        LISP_FAIL("unbound variable %s\n", repr(var));
    }

    bool can_set(Expr env, Expr var)
    {
        Expr const tmp = find_global(env, var);
        return tmp != nil;
    }

    Expr get(Expr env, Expr var)
    {
        Expr const vals = find_global(env, var);
        if (vals)
        {
            return car(vals);
        }
        else
        {
            LISP_FAIL("unbound variable %s\n", repr(var));
            return nil;
        }
    }

    void set(Expr env, Expr var, Expr val)
    {
        Expr const vals = find_global(env, var);
        if (vals)
        {
            rplaca(vals, val);
        }
        else
        {
            LISP_FAIL("unbound variable %s\n", repr(var));
        }
    }

protected:
    Expr find_local(Expr env, Expr var)
    {
        Expr vars = get_vars(env);
        Expr vals = get_vals(env);
        while (vars)
        {
            if (car(vars) == var)
            {
                return vals;
            }
            vars = cdr(vars);
            vals = cdr(vals);
        }
        return nil;
    }

    Expr find_global(Expr env, Expr var)
    {
        while (env)
        {
            Expr const vals = find_local(env, var);
            if (vals)
            {
                return vals;
            }
            else
            {
                env = get_outer(env);
            }
        }
        return nil;
    }
};

#if LISP_WANT_GLOBAL_API

EnvImpl g_env;

Expr make_env(Expr outer)
{
    return g_env.make(outer);
}

void env_def(Expr env, Expr var, Expr val)
{
    g_env.def(env, var, val);
}

void env_del(Expr env, Expr var)
{
    g_env.del(env, var);
}

Expr env_get(Expr env, Expr var)
{
    return g_env.get(env, var);
}

bool env_can_set(Expr env, Expr var)
{
    return g_env.can_set(env, var);
}

void env_set(Expr env, Expr var, Expr val)
{
    g_env.set(env, var, val);
}

#endif

#ifdef LISP_NAMESPACE
}
#endif
