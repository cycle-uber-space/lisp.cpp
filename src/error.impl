
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class PrintAndExit : public ErrorHandler
{
public:
    PrintAndExit(FILE * file, int code) : m_file(file), m_code(code)
    {
    }

    void vfail(char const * fmt, va_list ap)
    {
        fprintf(m_file, LISP_RED "[FAIL] " LISP_RESET);
        vfprintf(m_file, fmt, ap);
#if LISP_DEBUG_USE_SIGNAL
        raise(SIGINT);
#endif
        exit(m_code);
    }

    void vwarn(char const * fmt, va_list ap)
    {
        fprintf(m_file, LISP_YELLOW "[WARN] " LISP_RESET);
        vfprintf(m_file, fmt, ap);
    }

private:
    FILE * m_file;
    int m_code;
};

class ErrorSystem
{
public:
    ErrorSystem() : m_default(stderr, 1)
    {
    }

    void vfail(char const * fmt, va_list ap)
    {
        if (m_handlers.empty())
        {
            m_default.vfail(fmt, ap);
        }
        else
        {
            m_handlers.back()->vfail(fmt, ap);
        }
    }

    void vwarn(char const * fmt, va_list ap)
    {
        if (m_handlers.empty())
        {
            m_default.vwarn(fmt, ap);
        }
        else
        {
            m_handlers.back()->vwarn(fmt, ap);
        }
    }

    void push(ErrorHandler * handler)
    {
        m_handlers.push_back(handler);
    }

    void pop()
    {
        assert(!m_handlers.empty());
        m_handlers.pop_back();
    }

private:
    PrintAndExit m_default;
    std::vector<ErrorHandler *> m_handlers;
} g_error;

void error_fail(char const * fmt, ...)
{
    var ap: va_list;
    va_start(ap, fmt);
    g_error.vfail(fmt, ap);
    va_end(ap);
}

void error_warn(char const * fmt, ...)
{
    var ap: va_list;
    va_start(ap, fmt);
    g_error.vwarn(fmt, ap);
    va_end(ap);
}

void error_push(ErrorHandler * handler)
{
    g_error.push(handler);
}

void error_pop()
{
    g_error.pop();
}

#ifdef LISP_NAMESPACE
}
#endif
