
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class SymbolImpl
{
public:
    SymbolImpl(U64 type) : m_type(type)
    {
    }

    inline bool isinstance(Expr exp) const
    {
        return expr_type(exp) == m_type;
    }

    Expr make(char const * name)
    {
        LISP_ASSERT_DEBUG(name);

        // TODO check hash set of names first
        for (U64 index = 0; index < count(); ++index)
        {
            if (m_names[index] == name)
            {
                return make_expr(m_type, index);
            }
        }

        U64 const index = count();
        m_names.push_back(name);
        return make_expr(m_type, index);
    }

    char const * name(Expr exp)
    {
    #if LISP_SYMBOL_NAME_OF_NIL
        if (exp == nil)
        {
            return "nil";
        }
    #endif

        LISP_ASSERT(isinstance(exp));
        U64 const index = expr_data(exp);
        if (index >= count())
        {
            LISP_FAIL("illegal symbol index %" PRIu64 "\n", index);
        }
        return m_names[index].c_str();
    }

protected:
    U64 count() const
    {
        return (U64) m_names.size();
    }

private:
    U64 m_type;
    std::vector<std::string> m_names;
};

#if LISP_WANT_GLOBAL_API

static SymbolImpl g_symbol(TYPE_SYMBOL);

Expr make_symbol(char const * name)
{
    return g_symbol.make(name);
}

char const * symbol_name(Expr exp)
{
    return g_symbol.name(exp);
}

#endif

#ifdef LISP_NAMESPACE
}
#endif
