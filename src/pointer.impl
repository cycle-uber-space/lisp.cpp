
#if LISP_WANT_POINTER

#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class PointerImpl
{
public:
    init(U64 type) : m_type(type)
    {
    }

    inline bool isinstance(Expr exp) const
    {
        return expr_type(exp) == m_type;
    }

    func make(ptr: void *): Expr
    {
        U64 const index = count();
        m_values.push_back(ptr);
        return make_expr(m_type, index);
    }

    func value(Expr exp): void *
    {
        LISP_ASSERT(isinstance(exp));
        auto const index = expr_data(exp);
        LISP_ASSERT(index < count());
        return m_values[index];
    }

protected:
    U64 count() const
    {
        return m_values.size();
    }

private:
    U64 m_type;
    std::vector<void *> m_values;
};

#if LISP_WANT_GLOBAL_API
PointerImpl g_pointer(TYPE_POINTER);

bool is_pointer(Expr exp)
{
    return g_pointer.isinstance(exp);
}

Expr make_pointer(void * ptr)
{
    return g_pointer.make(ptr);
}

void * pointer_value(Expr exp)
{
    return g_pointer.value(exp);
}

#endif

#ifdef LISP_NAMESPACE
}
#endif

#endif
