
#ifdef LISP_NAMESPACE
namespace LISP_NAMESPACE {
#endif

class EvalImpl
{
public:
    Expr eval(Expr exp, Expr env)
    {
        switch (expr_type(exp))
        {
        case TYPE_NIL:
        case TYPE_CHAR:
        case TYPE_FIXNUM:
        case TYPE_STRING:
        case TYPE_KEYWORD:
#if LISP_WANT_POINTER
        case TYPE_POINTER:
#endif
            return exp;
        case TYPE_SYMBOL:
#if LISP_WANT_GENSYM
        case TYPE_GENSYM:
#endif
            return env_get(env, exp);
        case TYPE_CONS:
            return apply(car(exp), cdr(exp), env);
        case TYPE_BUILTIN_SYMBOL:
            return builtin_func(exp)(nil, env);
        default:
            LISP_FAIL("cannot evaluate %s\n", repr(exp));
            return nil;
        }
    }

    Expr eval_list(Expr exps, Expr env)
    {
        Expr ret = nil;
        for (Expr tmp = exps; tmp; tmp = cdr(tmp))
        {
            Expr const exp = car(tmp);
            ret = cons(eval(exp, env), ret);
        }
        return nreverse(ret);
    }

    Expr apply(Expr name, Expr args, Expr env)
    {
        if (is_builtin_function(name))
        {
            return builtin_func(name)(eval_list(args, env), env);
        }
        else if (is_builtin_special(name))
        {
            return builtin_func(name)(args, env);
        }
        else if (is_function(name))
        {
            return eval_body(closure_body(name),
                             make_call_env_from(closure_env(name),
                                                closure_args(name),
                                                eval_list(args, env)));
        }
        else if (is_macro(name))
        {
            return eval(eval_body(closure_body(name),
                                  make_call_env_from(closure_env(name),
                                                     closure_args(name),
                                                     args)),
                        env);
        }
        else
        {
            // TODO check for unlimited recursion
            return apply(eval(name, env), args, env);
        }
    }

protected:
    void bind_args(Expr env, Expr vars, Expr vals)
    {
        env_destructuring_bind(env, vars, vals);
    }

    Expr make_call_env_from(Expr lenv, Expr vars, Expr vals)
    {
        Expr cenv = make_env(lenv);
        bind_args(cenv, vars, vals);
        return cenv;
    }


    void env_destructuring_bind(Expr env, Expr vars, Expr vals)
    {
        if (vars == nil)
        {
            if (vals != nil)
            {
                LISP_FAIL("no more parameters to bind\n");
            }
        }
        else if (is_cons(vars))
        {
            while (vars)
            {
                if (is_cons(vars))
                {
                    LISP_ASSERT(is_cons(vals));
                    env_destructuring_bind(env, car(vars), car(vals));
                    vars = cdr(vars);
                    vals = cdr(vals);
                }
                else
                {
                    env_destructuring_bind(env, vars, vals);
                    break;
                }
            }
        }
        else
        {
            env_def(env, vars, vals);
        }
    }
};

EvalImpl g_eval;

Expr eval(Expr exp, Expr env)
{
    return g_eval.eval(exp, env);
}

Expr eval_body(Expr exps, Expr env)
{
    Expr ret = nil;
    for (Expr tmp = exps; tmp; tmp = cdr(tmp))
    {
        Expr const exp = car(tmp);
        ret = eval(exp, env);
    }
    return ret;
}

Expr apply(Expr name, Expr args, Expr env)
{
    return g_eval.apply(name, args, env);
}

#ifdef LISP_NAMESPACE
}
#endif
